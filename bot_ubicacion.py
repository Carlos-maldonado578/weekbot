import logging
import schedule
import time
import threading
import asyncio
import os
from datetime import datetime
import pytz
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Cargar variables de entorno desde .env en desarrollo local
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("üí° Para desarrollo local, instala python-dotenv: pip install python-dotenv")

# Configuraci√≥n de zona horaria de Chile
CHILE_TZ = pytz.timezone('America/Santiago')

# Configuraci√≥n desde variables de entorno
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID_TUYO = os.getenv('CHAT_ID_TUYO')
CHAT_ID_ESPOSA = os.getenv('CHAT_ID_ESPOSA')

# Validaci√≥n de configuraci√≥n
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN no configurado en variables de entorno")

# Configurar usuarios autorizados
AUTHORIZED_USERS = []
if CHAT_ID_TUYO:
    AUTHORIZED_USERS.append(CHAT_ID_TUYO)
if CHAT_ID_ESPOSA:
    AUTHORIZED_USERS.append(CHAT_ID_ESPOSA)

# Variable global para el bot
bot_application = None

# Configuraci√≥n de logging mejorada
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),  # Para Railway logs
        logging.FileHandler('bot.log') if not os.getenv(
            'RAILWAY_ENVIRONMENT') else logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class LocationBot:
    def __init__(self, token):
        global bot_application
        self.application = Application.builder().token(token).build()
        bot_application = self.application
        self.setup_handlers()
        # Estado para tracking de respuestas
        self.pending_requests = {}

    def setup_handlers(self):
        """Configurar manejadores de comandos y mensajes"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler(
            "ubicacion", self.request_location_manual))
        self.application.add_handler(CommandHandler(
            "tiempo_real", self.request_live_location))
        self.application.add_handler(CommandHandler(
            "test", self.test_automatic_sharing))
        self.application.add_handler(
            CommandHandler("estado", self.status_command))
        self.application.add_handler(MessageHandler(
            filters.LOCATION, self.handle_location))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start - Punto de entrada principal"""
        if not update.message:
            return

        user_id = str(update.effective_user.id)
        user_name = update.effective_user.first_name or "Usuario"

        # Si no hay usuarios configurados, mostrar IDs para configuraci√≥n
        if not AUTHORIZED_USERS:
            await update.message.reply_text(
                f"üîß **Configuraci√≥n inicial del bot**\n\n"
                f"üë§ Usuario: {user_name}\n"
                f"üÜî Tu Chat ID es: `{user_id}`\n\n"
                f"‚ö†Ô∏è **Para configurar en Railway:**\n"
                f"‚Ä¢ Variable `CHAT_ID_TUYO`: `{user_id}`\n"
                f"‚Ä¢ Variable `CHAT_ID_ESPOSA`: `{user_id}`\n\n"
                f"üìù Configura ambos IDs en las variables de entorno y reinicia el servicio.",
                parse_mode='Markdown'
            )
            return

        # Validar autorizaci√≥n
        if user_id not in AUTHORIZED_USERS:
            await update.message.reply_text("‚ùå No est√°s autorizado para usar este bot.")
            logger.warning(
                f"Usuario no autorizado intent√≥ acceder: {user_id} - {user_name}")
            return

        # Determinar rol del usuario
        user_role = "Esposo" if user_id == CHAT_ID_TUYO else "Esposa"

        # Crear teclado personalizado mejorado
        live_2h_button = KeyboardButton(
            "üìç Ubicaci√≥n Tiempo Real 2h", request_location=True)
        live_1h_button = KeyboardButton(
            "üìç Ubicaci√≥n Tiempo Real 1h", request_location=True)
        current_button = KeyboardButton(
            "üìå Ubicaci√≥n Actual", request_location=True)

        keyboard = ReplyKeyboardMarkup([
            [live_2h_button],
            [live_1h_button],
            [current_button]
        ], resize_keyboard=True)

        # Obtener pr√≥xima automatizaci√≥n
        next_auto = self.get_next_automation()

        await update.message.reply_text(
            f"¬°Hola {user_name}! üëã\n\n"
            f"üîê Rol: {user_role}\n"
            f"üÜî Chat ID: `{user_id}`\n\n"
            f"**‚è∞ Automatizaci√≥n configurada:**\n"
            f"üåÖ **6:30 AM** (Mar-Jue): Solo ubicaci√≥n de esposa\n"
            f"üåÜ **6:15 PM** (Mar-Jue): Ubicaci√≥n de ambos\n"
            f"üìÖ Pr√≥xima: {next_auto}\n\n"
            f"**üì± Comandos disponibles:**\n"
            f"`/ubicacion` - Solicitar ubicaci√≥n del otro\n"
            f"`/tiempo_real` - Solicitar ubicaci√≥n en tiempo real\n"
            f"`/test` - Probar automatizaci√≥n\n"
            f"`/estado` - Ver estado del bot\n"
            f"`/help` - Ayuda completa\n\n"
            f"üí° Usa los botones de abajo para enviar tu ubicaci√≥n r√°pidamente",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        logger.info(
            f"Usuario {user_role} ({user_name}) inici√≥ sesi√≥n correctamente")

    def get_next_automation(self):
        """Calcular pr√≥xima automatizaci√≥n"""
        now = datetime.now(CHILE_TZ)
        weekday = now.weekday()  # 0=Monday, 1=Tuesday, etc.

        # Si es martes (1), mi√©rcoles (2) o jueves (3)
        if weekday in [1, 2, 3]:
            # Verificar si ya pas√≥ la hora de hoy
            if now.hour < 6 or (now.hour == 6 and now.minute < 30):
                return f"Hoy a las 6:30 AM"
            elif now.hour < 18 or (now.hour == 18 and now.minute < 15):
                return f"Hoy a las 6:15 PM"
            else:
                # Ya pasaron ambas, calcular pr√≥ximo d√≠a
                if weekday == 3:  # Jueves, pr√≥ximo es martes
                    return "Pr√≥ximo martes a las 6:30 AM"
                else:
                    return "Ma√±ana a las 6:30 AM"
        else:
            # Calcular d√≠as hasta el pr√≥ximo martes
            days_until_tuesday = (1 - weekday) % 7
            if days_until_tuesday == 0:
                days_until_tuesday = 7

            if days_until_tuesday == 1:
                return "Ma√±ana (martes) a las 6:30 AM"
            else:
                return f"En {days_until_tuesday} d√≠as (martes) a las 6:30 AM"

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /help - Informaci√≥n completa"""
        if not await self.check_authorization(update):
            return

        chile_time = datetime.now(CHILE_TZ).strftime("%H:%M %Z")

        await update.message.reply_text(
            "ü§ñ **Bot de Ubicaci√≥n Familiar en Tiempo Real**\n\n"

            "**‚è∞ Automatizaciones programadas (Chile):**\n"
            f"‚Ä¢ **6:30 AM** (Martes-Jueves): Solicitud autom√°tica solo a esposa\n"
            f"‚Ä¢ **6:15 PM** (Martes-Jueves): Solicitud autom√°tica a ambos\n"
            f"‚Ä¢ **Hora actual**: {chile_time}\n\n"

            "**üì± Comandos disponibles:**\n"
            f"‚Ä¢ `/ubicacion` - Solicitar ubicaci√≥n actual al otro\n"
            f"‚Ä¢ `/tiempo_real` - Solicitar ubicaci√≥n en tiempo real\n"
            f"‚Ä¢ `/test` - Probar funcionamiento autom√°tico\n"
            f"‚Ä¢ `/estado` - Ver configuraci√≥n y estado\n\n"

            "**üìç Tipos de ubicaci√≥n:**\n"
            f"‚Ä¢ **Tiempo Real 2h**: Compartir por 2 horas (recomendado para trabajo)\n"
            f"‚Ä¢ **Tiempo Real 1h**: Compartir por 1 hora (para salidas cortas)\n"
            f"‚Ä¢ **Actual**: Solo ubicaci√≥n del momento\n\n"

            "**üí° Funcionamiento:**\n"
            f"‚Ä¢ **Ma√±anas**: Solo la esposa recibe solicitud (para ir al trabajo)\n"
            f"‚Ä¢ **Tardes**: Ambos reciben solicitud (para regresar a casa)\n"
            f"‚Ä¢ Las ubicaciones se reenv√≠an autom√°ticamente entre ustedes\n"
            f"‚Ä¢ Telegram actualiza la ubicaci√≥n cada 5-15 segundos\n"
            f"‚Ä¢ Recordatorio autom√°tico si no responden en 5 minutos\n\n"

            "**üîí Seguridad:** Solo ustedes dos pueden usar este bot.\n"
            "**üåç Zona horaria:** Am√©rica/Santiago (Chile)",
            parse_mode='Markdown'
        )

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /estado - Mostrar configuraci√≥n actual"""
        if not await self.check_authorization(update):
            return

        user_id = str(update.effective_user.id)
        user_role = "Esposo" if user_id == CHAT_ID_TUYO else "Esposa"

        # Tiempo actual en Chile
        now_chile = datetime.now(CHILE_TZ)

        # Estado del servidor
        railway_env = "‚úÖ Railway" if os.getenv(
            'RAILWAY_ENVIRONMENT') else "üíª Local"

        # Pr√≥xima automatizaci√≥n
        next_auto = self.get_next_automation()

        await update.message.reply_text(
            f"üìä **Estado del Bot**\n\n"
            f"üë§ **Tu informaci√≥n:**\n"
            f"‚Ä¢ Rol: {user_role}\n"
            f"‚Ä¢ Chat ID: `{user_id}`\n\n"
            f"‚öôÔ∏è **Configuraci√≥n:**\n"
            f"‚Ä¢ Usuarios autorizados: {len(AUTHORIZED_USERS)}/2\n"
            f"‚Ä¢ Esposo configurado: {'‚úÖ' if CHAT_ID_TUYO else '‚ùå'}\n"
            f"‚Ä¢ Esposa configurada: {'‚úÖ' if CHAT_ID_ESPOSA else '‚ùå'}\n"
            f"‚Ä¢ Entorno: {railway_env}\n\n"
            f"‚è∞ **Tiempo (Chile):**\n"
            f"‚Ä¢ Hora actual: {now_chile.strftime('%H:%M:%S')}\n"
            f"‚Ä¢ Fecha: {now_chile.strftime('%d/%m/%Y - %A')}\n"
            f"‚Ä¢ Pr√≥xima automatizaci√≥n: {next_auto}\n\n"
            f"üì° **Estado del servicio:** ‚úÖ Activo\n"
            f"üîÑ **Scheduler:** ‚úÖ Ejecut√°ndose",
            parse_mode='Markdown'
        )

    async def request_location_manual(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /ubicacion - Solicitar ubicaci√≥n actual"""
        if not await self.check_authorization(update):
            return

        user_id = str(update.effective_user.id)
        target_id, target_name = self.get_target_user(user_id)
        requester_name = update.effective_user.first_name or "Usuario"

        if not target_id:
            await update.message.reply_text("‚ùå No se pudo determinar el destinatario.")
            return

        # Marcar solicitud pendiente
        self.pending_requests[target_id] = {
            'type': 'manual',
            'requester': requester_name,
            'time': datetime.now(CHILE_TZ)
        }

        await self.send_location_request(target_id, f"üîî Tu {target_name} ({requester_name}) solicita tu ubicaci√≥n actual")
        await update.message.reply_text(f"‚úÖ Solicitud de ubicaci√≥n enviada a tu {target_name}")
        logger.info(
            f"Solicitud manual de {requester_name} enviada a {target_name}")

    async def request_live_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /tiempo_real - Solicitar ubicaci√≥n en tiempo real"""
        if not await self.check_authorization(update):
            return

        user_id = str(update.effective_user.id)
        target_id, target_name = self.get_target_user(user_id)
        requester_name = update.effective_user.first_name or "Usuario"

        if not target_id:
            await update.message.reply_text("‚ùå No se pudo determinar el destinatario.")
            return

        # Marcar solicitud pendiente
        self.pending_requests[target_id] = {
            'type': 'live',
            'requester': requester_name,
            'time': datetime.now(CHILE_TZ)
        }

        await self.send_live_location_request(target_id, f"üìç Tu {target_name} ({requester_name}) solicita tu ubicaci√≥n en tiempo real")
        await update.message.reply_text(f"‚úÖ Solicitud de ubicaci√≥n en tiempo real enviada a tu {target_name}")
        logger.info(
            f"Solicitud tiempo real de {requester_name} enviada a {target_name}")

    async def test_automatic_sharing(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /test - Probar automatizaciones"""
        if not await self.check_authorization(update):
            return

        if not CHAT_ID_TUYO or not CHAT_ID_ESPOSA:
            await update.message.reply_text("‚ùå Falta configurar algunos Chat IDs para hacer la prueba completa.")
            return

        await update.message.reply_text("üß™ **Iniciando prueba de automatizaciones...**\n\n"
                                        "Se simular√°n ambos escenarios (modo de prueba):")

        # Simular solicitud matutina (solo esposa)
        await update.message.reply_text("üåÖ **Paso 1:** Simulando solicitud matutina (solo esposa)...")
        await asyncio.sleep(2)
        await self.automatic_location_request_spouse_only(test_mode=True)

        await asyncio.sleep(3)

        # Simular solicitud vespertina (ambos)
        await update.message.reply_text("üåÜ **Paso 2:** Simulando solicitud vespertina (ambos)...")
        await asyncio.sleep(2)
        await self.automatic_location_request_both(test_mode=True)

        await update.message.reply_text(
            "‚úÖ **Prueba completada exitosamente**\n\n"
            "üìã **Resultados del test:**\n"
            "‚Ä¢ ‚úÖ Esposa recibi√≥ solicitud matutina de prueba\n"
            "‚Ä¢ ‚úÖ Ambos recibieron solicitud vespertina de prueba\n"
            "‚Ä¢ ‚úÖ Mensajes enviados correctamente\n"
            "‚Ä¢ ‚úÖ Sistema de automatizaci√≥n funcionando\n\n"
            "üí° **Nota:** Fueron solicitudes de prueba. Las reales se env√≠an autom√°ticamente en los horarios programados.",
            parse_mode='Markdown'
        )
        logger.info("Prueba de automatizaci√≥n ejecutada exitosamente")

    async def handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manejar ubicaciones recibidas - VERSI√ìN MEJORADA"""
        if not update.message or not update.message.location:
            return

        if not await self.check_authorization(update):
            return

        try:
            user_id = str(update.effective_user.id)
            location = update.message.location
            user_name = update.effective_user.first_name or "Usuario"

            # Limpiar solicitud pendiente
            if user_id in self.pending_requests:
                del self.pending_requests[user_id]

            # Determinar destinatario
            recipient_id, sender_role = self.get_target_user(user_id)
            if not recipient_id:
                await update.message.reply_text("‚ùå Error al procesar la ubicaci√≥n.")
                return

            recipient_role = "esposo" if sender_role == "esposa" else "esposa"

            # Tiempo actual en Chile
            current_time = datetime.now(CHILE_TZ).strftime("%H:%M")

            # Verificar si es ubicaci√≥n en tiempo real
            live_period = getattr(location, 'live_period', None)

            if live_period and live_period > 0:
                # Ubicaci√≥n en tiempo real
                await context.bot.send_location(
                    chat_id=recipient_id,
                    latitude=location.latitude,
                    longitude=location.longitude,
                    live_period=live_period
                )

                duration_hours = live_period // 3600
                duration_minutes = (live_period % 3600) // 60

                await context.bot.send_message(
                    chat_id=recipient_id,
                    text=f"üìçüî¥ **Ubicaci√≥n en Tiempo Real Activa**\n\n"
                    f"üë§ Desde: Tu {sender_role} ({user_name})\n"
                    f"‚è∞ Iniciada: {current_time} (Chile)\n"
                    f"‚è±Ô∏è Duraci√≥n: {duration_hours}h {duration_minutes}m\n\n"
                    f"üîÑ La ubicaci√≥n se actualiza autom√°ticamente cada 5-15 segundos\n"
                    f"üì± Puedes ver la actualizaci√≥n en tiempo real en el mapa",
                    parse_mode='Markdown'
                )

                await update.message.reply_text(
                    f"‚úÖ **Ubicaci√≥n en tiempo real compartida exitosamente**\n\n"
                    f"üì§ Enviada a: Tu {recipient_role}\n"
                    f"‚è±Ô∏è Duraci√≥n: {duration_hours}h {duration_minutes}m\n"
                    f"üîÑ Se actualiza autom√°ticamente\n"
                    f"üìç Ubicaci√≥n activa hasta las {(datetime.now(CHILE_TZ).hour + duration_hours):02d}:{(datetime.now(CHILE_TZ).minute + duration_minutes):02d}",
                    parse_mode='Markdown'
                )
                logger.info(
                    f"Ubicaci√≥n tiempo real enviada: {user_name} -> {recipient_role} ({duration_hours}h {duration_minutes}m)")

            else:
                # Ubicaci√≥n normal
                await context.bot.send_location(
                    chat_id=recipient_id,
                    latitude=location.latitude,
                    longitude=location.longitude
                )

                await context.bot.send_message(
                    chat_id=recipient_id,
                    text=f"üìç **Ubicaci√≥n Recibida**\n\n"
                    f"üë§ Desde: Tu {sender_role} ({user_name})\n"
                    f"‚è∞ Hora: {current_time} (Chile)\n"
                    f"üìå Ubicaci√≥n actual del momento\n"
                    f"üéØ Precisi√≥n: {'Alta' if location.horizontal_accuracy and location.horizontal_accuracy < 50 else 'Buena'}",
                    parse_mode='Markdown'
                )

                await update.message.reply_text(f"‚úÖ Ubicaci√≥n actual enviada a tu {recipient_role}")
                logger.info(
                    f"Ubicaci√≥n actual enviada: {user_name} -> {recipient_role}")

        except Exception as e:
            logger.error(f"Error enviando ubicaci√≥n: {e}")
            await update.message.reply_text("‚ùå Error al enviar la ubicaci√≥n. Int√©ntalo de nuevo.")

    async def send_location_request(self, chat_id, message):
        """Enviar solicitud de ubicaci√≥n normal"""
        location_button = KeyboardButton(
            "üìå Enviar mi ubicaci√≥n", request_location=True)
        keyboard = ReplyKeyboardMarkup(
            [[location_button]], resize_keyboard=True, one_time_keyboard=True)

        await self.application.bot.send_message(
            chat_id=chat_id,
            text=message,
            reply_markup=keyboard
        )

    async def send_live_location_request(self, chat_id, message):
        """Enviar solicitud de ubicaci√≥n en tiempo real"""
        live_2h_button = KeyboardButton(
            "üìç Tiempo Real 2h", request_location=True)
        live_1h_button = KeyboardButton(
            "üìç Tiempo Real 1h", request_location=True)
        normal_button = KeyboardButton("üìå Solo Actual", request_location=True)

        keyboard = ReplyKeyboardMarkup([
            [live_2h_button],
            [live_1h_button],
            [normal_button]
        ], resize_keyboard=True, one_time_keyboard=True)

        await self.application.bot.send_message(
            chat_id=chat_id,
            text=f"{message}\n\n"
            f"üìç **Selecciona el tipo de ubicaci√≥n:**\n"
            f"‚Ä¢ **Tiempo Real 2h**: Compartir por 2 horas (recomendado para trabajo)\n"
            f"‚Ä¢ **Tiempo Real 1h**: Compartir por 1 hora (para salidas cortas)\n"
            f"‚Ä¢ **Solo Actual**: Ubicaci√≥n del momento\n\n"
            f"üí° La ubicaci√≥n en tiempo real se actualiza autom√°ticamente cada 5-15 segundos.",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def automatic_location_request_both(self, test_mode=False):
        """Solicitar ubicaci√≥n autom√°ticamente a ambos (tardes)"""
        current_time = datetime.now(CHILE_TZ).strftime("%H:%M")
        test_prefix = "üß™ **[MODO PRUEBA]** " if test_mode else ""

        message = (f"{test_prefix}üåÜ **Ubicaci√≥n Autom√°tica Vespertina**\n\n"
                   f"‚è∞ Hora: {current_time} (Chile)\n"
                   f"üìç Por favor comparte tu ubicaci√≥n en tiempo real por 2 horas\n"
                   f"üè† Para coordinar el regreso a casa\n"
                   f"üîÑ Automatizaci√≥n programada")

        sent_count = 0
        if CHAT_ID_TUYO:
            await self.send_live_location_request(CHAT_ID_TUYO, message)
            sent_count += 1
        if CHAT_ID_ESPOSA:
            await self.send_live_location_request(CHAT_ID_ESPOSA, message)
            sent_count += 1

        if not test_mode:
            # Programar recordatorio en 5 minutos si no responden
            await asyncio.sleep(300)  # 5 minutos
            await self.send_reminder_if_needed()

        logger.info(
            f"Solicitudes autom√°ticas vespertinas enviadas a {sent_count} usuarios - {current_time} {'[TEST]' if test_mode else ''}")

    async def automatic_location_request_spouse_only(self, test_mode=False):
        """Solicitar ubicaci√≥n autom√°ticamente solo a la esposa (ma√±anas)"""
        current_time = datetime.now(CHILE_TZ).strftime("%H:%M")
        test_prefix = "üß™ **[MODO PRUEBA]** " if test_mode else ""

        message = (f"{test_prefix}üåÖ **Ubicaci√≥n Autom√°tica Matutina**\n\n"
                   f"‚è∞ Hora: {current_time} (Chile)\n"
                   f"üìç Por favor comparte tu ubicaci√≥n en tiempo real por 2 horas\n"
                   f"üè¢ Para el trayecto al trabajo\n"
                   f"üîÑ Automatizaci√≥n programada")

        if CHAT_ID_ESPOSA:
            await self.send_live_location_request(CHAT_ID_ESPOSA, message)

            if not test_mode:
                # Programar recordatorio en 5 minutos si no responde
                await asyncio.sleep(300)  # 5 minutos
                await self.send_reminder_if_needed_spouse()

            logger.info(
                f"Solicitud autom√°tica matutina enviada a esposa - {current_time} {'[TEST]' if test_mode else ''}")
        else:
            logger.warning(
                "CHAT_ID_ESPOSA no configurado para solicitud matutina")

    async def send_reminder_if_needed(self):
        """Enviar recordatorio si no han respondido"""
        reminder_message = (f"‚è∞ **RECORDATORIO DE UBICACI√ìN**\n\n"
                            f"A√∫n no has compartido tu ubicaci√≥n.\n"
                            f"Por favor, toca uno de los botones para compartir.\n\n"
                            f"üí° Es importante para coordinar nuestros horarios.")

        if CHAT_ID_TUYO and CHAT_ID_TUYO in self.pending_requests:
            await self.application.bot.send_message(CHAT_ID_TUYO, reminder_message, parse_mode='Markdown')
        if CHAT_ID_ESPOSA and CHAT_ID_ESPOSA in self.pending_requests:
            await self.application.bot.send_message(CHAT_ID_ESPOSA, reminder_message, parse_mode='Markdown')

    async def send_reminder_if_needed_spouse(self):
        """Enviar recordatorio solo a la esposa"""
        if CHAT_ID_ESPOSA and CHAT_ID_ESPOSA in self.pending_requests:
            reminder_message = (f"‚è∞ **RECORDATORIO DE UBICACI√ìN**\n\n"
                                f"A√∫n no has compartido tu ubicaci√≥n matutina.\n"
                                f"Por favor, toca uno de los botones para compartir.\n\n"
                                f"üí° Es para coordinar el trayecto al trabajo.")

            await self.application.bot.send_message(CHAT_ID_ESPOSA, reminder_message, parse_mode='Markdown')

    async def check_authorization(self, update: Update) -> bool:
        """Verificar autorizaci√≥n del usuario"""
        if not update.message:
            return False

        user_id = str(update.effective_user.id)

        if not AUTHORIZED_USERS:
            await update.message.reply_text("‚öôÔ∏è Bot en modo configuraci√≥n. Usa /start para obtener tu Chat ID.")
            return False

        if user_id not in AUTHORIZED_USERS:
            await update.message.reply_text("‚ùå No est√°s autorizado para usar este bot.")
            return False

        return True

    def get_target_user(self, user_id: str):
        """Obtener informaci√≥n del usuario destinatario"""
        if user_id == CHAT_ID_TUYO:
            return CHAT_ID_ESPOSA, "esposa"
        elif user_id == CHAT_ID_ESPOSA:
            return CHAT_ID_TUYO, "esposo"
        else:
            return None, None

# Funciones de automatizaci√≥n mejoradas


async def run_automatic_request_morning():
    """Ejecutar solicitud autom√°tica matutina"""
    if bot_application and CHAT_ID_ESPOSA:
        try:
            bot_instance = LocationBot.__new__(LocationBot)
            bot_instance.application = bot_application
            bot_instance.pending_requests = {}
            await bot_instance.automatic_location_request_spouse_only()
        except Exception as e:
            logger.error(f"Error en solicitud matutina: {e}")


async def run_automatic_request_evening():
    """Ejecutar solicitud autom√°tica vespertina"""
    if bot_application and (CHAT_ID_TUYO or CHAT_ID_ESPOSA):
        try:
            bot_instance = LocationBot.__new__(LocationBot)
            bot_instance.application = bot_application
            bot_instance.pending_requests = {}
            await bot_instance.automatic_location_request_both()
        except Exception as e:
            logger.error(f"Error en solicitud vespertina: {e}")


def morning_location_job():
    """Trabajo programado matutino (6:30 AM Chile)"""
    current_time_chile = datetime.now(CHILE_TZ).strftime('%H:%M %Z')
    logger.info(f"üåÖ Ejecutando trabajo matutino - {current_time_chile}")

    # Crear nueva tarea en el loop de asyncio
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(run_automatic_request_morning())
    except RuntimeError:
        # Si no hay loop, crear uno nuevo
        asyncio.create_task(run_automatic_request_morning())


def evening_location_job():
    """Trabajo programado vespertino (6:15 PM Chile)"""
    current_time_chile = datetime.now(CHILE_TZ).strftime('%H:%M %Z')
    logger.info(f"üåÜ Ejecutando trabajo vespertino - {current_time_chile}")

    # Crear nueva tarea en el loop de asyncio
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(run_automatic_request_evening())
    except RuntimeError:
        # Si no hay loop, crear uno nuevo
        asyncio.create_task(run_automatic_request_evening())


def schedule_jobs():
    """Programar trabajos autom√°ticos con zona horaria de Chile"""
    # Configurar schedule para usar zona horaria de Chile
    # Solicitudes matutinas (solo esposa) - Martes a Jueves a las 6:30 AM
    schedule.every().tuesday.at("06:30").do(morning_location_job)
    schedule.every().wednesday.at("06:30").do(morning_location_job)
    schedule.every().thursday.at("06:30").do(morning_location_job)

    # Solicitudes vespertinas (ambos) - Martes a Jueves a las 6:15 PM
    schedule.every().tuesday.at("18:15").do(evening_location_job)
    schedule.every().wednesday.at("18:15").do(evening_location_job)
    schedule.every().thursday.at("18:15").do(evening_location_job)

    logger.info(
        "‚è∞ Trabajos programados configurados para zona horaria de Chile:")
    logger.info("   üåÖ 6:30 AM (Mar-Jue): Solicitud solo a esposa")
    logger.info("   üåÜ 6:15 PM (Mar-Jue): Solicitud a ambos")

    # Log de pr√≥ximos trabajos
    jobs = schedule.get_jobs()
    logger.info(f"üìÖ Total de trabajos programados: {len(jobs)}")


def run_scheduler():
    """Ejecutar programador en hilo separado con manejo de zona horaria"""
    logger.info("üîÑ Iniciando scheduler con zona horaria de Chile")

    while True:
        try:
            # Ajustar el tiempo del scheduler a la zona horaria de Chile
            current_chile = datetime.now(CHILE_TZ)

            # Ejecutar trabajos pendientes
            schedule.run_pending()

            # Log cada hora para confirmar que est√° funcionando
            if current_chile.minute == 0:
                logger.info(
                    f"‚è∞ Scheduler activo - {current_chile.strftime('%H:%M %Z')} - Pr√≥ximo trabajo: {schedule.next_run()}")

            time.sleep(60)  # Verificar cada minuto

        except Exception as e:
            logger.error(f"Error en scheduler: {e}")
            time.sleep(60)  # Esperar antes de reintentar


def setup_railway_config():
    """Configurar espec√≠ficamente para Railway"""
    if os.getenv('RAILWAY_ENVIRONMENT'):
        logger.info("üöÇ Detectado entorno Railway")
        logger.info(
            f"üåç Variables configuradas: BOT_TOKEN={'‚úÖ' if BOT_TOKEN else '‚ùå'}, CHAT_ID_TUYO={'‚úÖ' if CHAT_ID_TUYO else '‚ùå'}, CHAT_ID_ESPOSA={'‚úÖ' if CHAT_ID_ESPOSA else '‚ùå'}")

        # Configurar logging para Railway
        import sys
        handler = logging.StreamHandler(sys.stdout)
        handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)

        return True
    return False


def validate_configuration():
    """Validar configuraci√≥n completa del bot"""
    issues = []

    if not BOT_TOKEN:
        issues.append("‚ùå BOT_TOKEN no configurado")

    if not CHAT_ID_TUYO:
        issues.append("‚ö†Ô∏è CHAT_ID_TUYO no configurado")

    if not CHAT_ID_ESPOSA:
        issues.append("‚ö†Ô∏è CHAT_ID_ESPOSA no configurado")

    if issues:
        logger.warning("üîß Problemas de configuraci√≥n detectados:")
        for issue in issues:
            logger.warning(f"   {issue}")

        if not BOT_TOKEN:
            return False

    logger.info("‚úÖ Configuraci√≥n del bot validada correctamente")
    logger.info(f"üë• Usuarios autorizados: {len(AUTHORIZED_USERS)}")

    return True


def main():
    """Funci√≥n principal mejorada"""
    print("ü§ñ Iniciando Bot de Ubicaci√≥n Familiar v2.0...")
    print("=" * 50)

    # Detectar entorno
    is_railway = setup_railway_config()
    environment = "üöÇ Railway" if is_railway else "üíª Local"
    print(f"üåç Entorno detectado: {environment}")

    # Validar configuraci√≥n
    if not validate_configuration():
        print("‚ùå Error cr√≠tico en la configuraci√≥n. Deteniendo...")
        return

    # Crear instancia del bot
    try:
        print("üì° Creando instancia del bot...")
        bot = LocationBot(BOT_TOKEN)
        print("‚úÖ Bot creado exitosamente")
    except Exception as e:
        print(f"‚ùå Error creando bot: {e}")
        logger.error(f"Error cr√≠tico creando bot: {e}")
        return

    # Configurar trabajos programados
    print("‚è∞ Configurando automatizaciones...")
    schedule_jobs()

    # Iniciar programador en hilo separado
    print("üîÑ Iniciando scheduler...")
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()

    # Mostrar informaci√≥n de inicio
    chile_time = datetime.now(CHILE_TZ).strftime("%H:%M:%S %Z")
    print("\n" + "=" * 50)
    print("üéâ BOT INICIADO EXITOSAMENTE")
    print("=" * 50)
    print(f"üïí Hora actual (Chile): {chile_time}")
    print(f"üì± Usuarios configurados: {len(AUTHORIZED_USERS)}/2")
    print(f"üåç Entorno: {environment}")
    print("\nüìã FUNCIONALIDADES ACTIVAS:")
    print("   ‚úÖ Comandos interactivos (/start, /help, /estado, etc.)")
    print("   ‚úÖ Manejo de ubicaciones en tiempo real")
    print("   ‚úÖ Automatizaciones programadas:")
    print("      üåÖ 6:30 AM (Mar-Jue): Solo esposa")
    print("      üåÜ 6:15 PM (Mar-Jue): Ambos")
    print("   ‚úÖ Recordatorios autom√°ticos")
    print("   ‚úÖ Sistema de autorizaci√≥n")
    print("   ‚úÖ Zona horaria de Chile")

    if len(AUTHORIZED_USERS) < 2:
        print("\n‚ö†Ô∏è  CONFIGURACI√ìN PENDIENTE:")
        print("   üìù Env√≠a /start al bot para obtener los Chat IDs")
        print("   ‚öôÔ∏è Configura las variables de entorno faltantes")

    print("\nüîí SEGURIDAD:")
    print("   ‚úÖ Solo usuarios autorizados")
    print("   ‚úÖ Validaci√≥n de permisos")
    print("   ‚úÖ Logging de actividades")

    print("\nüéõÔ∏è  CONTROLES:")
    print("   ‚è∏Ô∏è  Presiona Ctrl+C para detener")
    print("   üìä Usa /estado en el bot para ver el status")
    print("   üß™ Usa /test para probar las automatizaciones")
    print("=" * 50)

    # Iniciar bot
    try:
        logger.info("üöÄ Iniciando polling del bot...")
        bot.application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True  # Ignorar mensajes pendientes al iniciar
        )
    except KeyboardInterrupt:
        print("\nüõë Bot detenido por el usuario")
        logger.info("Bot detenido manualmente")
    except Exception as e:
        print(f"‚ùå Error ejecutando bot: {e}")
        logger.error(f"Error cr√≠tico ejecutando bot: {e}")

        # Si es Railway, intentar reiniciar
        if is_railway:
            print("üîÑ Intentando reiniciar en 30 segundos...")
            time.sleep(30)
            main()  # Reiniciar


if __name__ == '__main__':
    main()
